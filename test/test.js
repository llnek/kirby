/*Auto generated by Kirby v1.0.0 - Thu Jul 01 2021 00:42:14 GMT-0700 (Pacific Daylight Time)
  czlab.kirby.test.stdlib
{"doc" "" "author" "Kenneth Leung"}
*/

const std = require("kirby");
const set_QMRK_ = std["set_QMRK_"];
const map_QMRK_ = std["map_QMRK_"];
const conj_BANG_ = std["conj_BANG_"];
const println = std["println"];
const inc = std["inc"];
const dec = std["dec"];
const rseq = std["rseq"];
const split_DASH_with = std["split_DASH_with"];
const take_DASH_while = std["take_DASH_while"];
const drop_DASH_while = std["drop_DASH_while"];
const kirbyref = require("kirby");
const __module_namespace__ = "czlab.kirby.test.stdlib";
var s = std;
var TMPVAR = null;
////////////////////////////////////////////////////////////////////////////////
//fn: [mult3] in file: test.ky, line: 27
//
function mult3(x) {
  return (3 * x);
}
////////////////////////////////////////////////////////////////////////////////
//fn: [add2] in file: test.ky, line: 28
//
function add2(x) {
  return (2 + x);
}
////////////////////////////////////////////////////////////////////////////////
//fn: [exlog] in file: test.ky, line: 31
//
function exlog(expr, log) {
  return function(s) {
    let v = s.value;
    let v_QUOT_ = expr(v);
    let msg = kirbyref.vector(log, "(", v, ")").join("");
    let log_QUOT_ = std.conj(s.log, msg);
    return kirbyref.vec(v_QUOT_, kirbyref.object("value", v_QUOT_, "log", log_QUOT_));
  };
}
const test_DASH_stdlib = function() {
  let ____args = Array.prototype.slice.call(arguments);
  return kirbyref.vector(kirbyref.ensure_DASH_test((!(0 == kirbyref.count(kirbyref.vec(1)))), "not empty?"), kirbyref.ensure_DASH_test((0 == kirbyref.count(kirbyref.hash_DASH_set())), "empty?"), kirbyref.ensure_DASH_test("abc".startsWith("a"), "string starts?"), kirbyref.ensure_DASH_test("abc".endsWith("c"), "string ends?"), kirbyref.ensure_DASH_test((3 === kirbyref.count(kirbyref.vec(1, 2, 3))), "n#"), kirbyref.ensure_DASH_test((1 === kirbyref.vec(1, 2)[0]), "first"), kirbyref.ensure_DASH_test((2 === kirbyref.vec(1, 2)[1]), "_2"), kirbyref.ensure_DASH_test((3 === kirbyref.vec(1, 2, 3)[2]), "_3"), kirbyref.ensure_DASH_test((1 === kirbyref.getProp(Array.prototype.slice.call(kirbyref.vec(1, 2), 0, -1), 0)), "slice,a,b"), kirbyref.ensure_DASH_test((2 === kirbyref.getProp(Array.prototype.slice.call(kirbyref.vec(1, 2), 1), 0)), "slice,a"), kirbyref.ensure_DASH_test((parseFloat("1.2") === 1.2), "float"), kirbyref.ensure_DASH_test((parseInt("12") === 12), "int"), kirbyref.ensure_DASH_test((!std.eq_QMRK_(s.keyword(":aaa"), "aaa")), "!eq? keywords"), kirbyref.ensure_DASH_test((s.keyword(":aaa") == "aaa"), "match keywords"), kirbyref.ensure_DASH_test(("aaa" == "aaa"), "match both keywords"), kirbyref.ensure_DASH_test(std.eq_QMRK_("aaa", "aaa"), "eq? both keywords"), kirbyref.ensure_DASH_test((1 !== 2), "not="), kirbyref.ensure_DASH_test((3 != 4), "!="), kirbyref.ensure_DASH_test((7 == 7), "=="), kirbyref.ensure_DASH_test((8 === 8), "="), kirbyref.ensure_DASH_test((4 > 3), ">"), kirbyref.ensure_DASH_test((5 >= 5), ">="), kirbyref.ensure_DASH_test((4 < 7), "<"), kirbyref.ensure_DASH_test((9 <= 9), "<="), kirbyref.ensure_DASH_test((3200 === (100 << 2 << 3)), "<<"), kirbyref.ensure_DASH_test((40 === (10 << 2)), "<<"), kirbyref.ensure_DASH_test((2 === (10 >> 2)), ">>"), kirbyref.ensure_DASH_test((6 === (54 >>> 3)), ">>>"), kirbyref.ensure_DASH_test((6 === (2 + 2 + 2)), "+"), kirbyref.ensure_DASH_test((6 === (12 - 3 - 2 - 1)), "-"), kirbyref.ensure_DASH_test((-1 === (-1 * 1)), "-"), kirbyref.ensure_DASH_test((1 === (-1 - -2)), "-"), kirbyref.ensure_DASH_test((24 === (2 * 3 * 4)), "*"), kirbyref.ensure_DASH_test((2 === (12 / 3 / 2)), "/"), kirbyref.ensure_DASH_test((2 === (12 / 3 / 2)), "div"), kirbyref.ensure_DASH_test((2 === (kirbyref.mod(-10, 3))), "mod"), kirbyref.ensure_DASH_test((1 === (kirbyref.mod(10, 3))), "mod"), kirbyref.ensure_DASH_test((true === (false || false || true)), "or"), kirbyref.ensure_DASH_test((false === (true && true && false)), "and"), kirbyref.ensure_DASH_test((true === (true && true && true)), "and"), kirbyref.ensure_DASH_test((8 === (2 ** 3)), "exp"), kirbyref.ensure_DASH_test((1 === (10 % 3)), "rem"), kirbyref.ensure_DASH_test((2 === (10 & 3)), "&"), kirbyref.ensure_DASH_test((11 === (10 | 3)), "|"), kirbyref.ensure_DASH_test((-11 === (~10)), "~"), kirbyref.ensure_DASH_test((9 === (10 ^ 3)), "^"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(4, 3), (function() {
    let x = 3;
    let y = x++;
    return kirbyref.vec(x, y);
  }).call(this)), "++"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(4, 4), (function() {
    let x = 3;
    let y = ++x;
    return kirbyref.vec(x, y);
  }).call(this)), "++"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(2, 3), (function() {
    let x = 3;
    let y = x--;
    return kirbyref.vec(x, y);
  }).call(this)), "--"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(2, 2), (function() {
    let x = 3;
    let y = --x;
    return kirbyref.vec(x, y);
  }).call(this)), "--"), kirbyref.ensure_DASH_test((6 === (function() {
      let x = 3;
      return (x += 3);
    }).call(this)), "+="), kirbyref.ensure_DASH_test((3 === (function() {
      let x = 6;
      return (x -= 3);
    }).call(this)), "-="), kirbyref.ensure_DASH_test((18 === (function() {
      let x = 6;
      return (x *= 3);
    }).call(this)), "*="), kirbyref.ensure_DASH_test((2 === (function() {
      let x = 6;
      return (x /= 3);
    }).call(this)), "/="), kirbyref.ensure_DASH_test((2 === (function() {
      let x = 6;
      return (x /= 3);
    }).call(this)), "div="), kirbyref.ensure_DASH_test((1 === (function() {
      let x = 10;
      return (x %= 3);
    }).call(this)), "rem="), kirbyref.ensure_DASH_test((8 === (function() {
      let x = 2;
      return (x **= 3);
    }).call(this)), "exp="), kirbyref.ensure_DASH_test((3 === (function() {
      let x = 19;
      return (x &= 3);
    }).call(this)), "&="), kirbyref.ensure_DASH_test((111 === (function() {
      let x = 109;
      return (x |= 3);
    }).call(this)), "|="), kirbyref.ensure_DASH_test((110 === (function() {
      let x = 109;
      return (x ^= 3);
    }).call(this)), "^="), kirbyref.ensure_DASH_test((872 === (function() {
      let x = 109;
      return (x <<= 3);
    }).call(this)), "<<="), kirbyref.ensure_DASH_test((13 === (function() {
      let x = 109;
      return (x >>= 3);
    }).call(this)), ">>="), kirbyref.ensure_DASH_test((18 === (function() {
      let x = 148;
      return (x >>>= 3);
    }).call(this)), ">>>="), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = undefined);
    return (undefined === TMPVAR);
  }).call(this), "undef!"), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = null);
    return (null === TMPVAR);
  }).call(this), "nil!"), kirbyref.ensure_DASH_test((2 === (kirbyref.vec(1, 2, 3).length - 1)), "last-index"), kirbyref.ensure_DASH_test((2 === kirbyref.getProp(kirbyref.vec(1, 2).slice(1), 0)), "rest"), kirbyref.ensure_DASH_test((2 === kirbyref.getProp(kirbyref.vec(1, 2).slice(1), 0)), "cdr"), kirbyref.ensure_DASH_test((2 === kirbyref.vec(1, 2)[1]), "second"), kirbyref.ensure_DASH_test((1 === kirbyref.vec(1, 2)[0]), "first"), kirbyref.ensure_DASH_test((2 === kirbyref.vec(1, 2)[1]), "_2"), kirbyref.ensure_DASH_test((1 === kirbyref.vec(1, 2)[0]), "_1"), kirbyref.ensure_DASH_test((1 === kirbyref.vec(1, 2)[0]), "car"), kirbyref.ensure_DASH_test((2 === kirbyref.vec(1, 2)[(1 + 0)]), "nexth"), kirbyref.ensure_DASH_test((3 === kirbyref.vec(1, 2, 3)[2]), "nth"), kirbyref.ensure_DASH_test((!((0 == kirbyref.mod(2, 2)) && (0 == kirbyref.mod(3, 2)))), "not even?"), kirbyref.ensure_DASH_test((0 == kirbyref.mod(2, 2)), "even? a"), kirbyref.ensure_DASH_test(((0 == kirbyref.mod(2, 2)) && (0 == kirbyref.mod(4, 2))), "even? a,b"), kirbyref.ensure_DASH_test((!((0 != kirbyref.mod(2, 2)) && (0 != kirbyref.mod(3, 2)))), "not odd?"), kirbyref.ensure_DASH_test((0 != kirbyref.mod(3, 2)), "odd? a"), kirbyref.ensure_DASH_test(((0 != kirbyref.mod(3, 2)) && (0 != kirbyref.mod(9, 2))), "odd? a,b"), kirbyref.ensure_DASH_test((3 === kirbyref.vec(1, 2, 3).length), "alen"), kirbyref.ensure_DASH_test((kirbyref.vec(1, 2).length > 0), "nzlen?"), kirbyref.ensure_DASH_test((kirbyref.vec().length == 0), "zlen?"), kirbyref.ensure_DASH_test(("string" === typeof ("hello")), "type"), kirbyref.ensure_DASH_test(("[object Array]" === Object.prototype.toString.call(kirbyref.vec(3))), "whatis?"), kirbyref.ensure_DASH_test(kirbyref.rtti_QMRK_(/^hello/, "[object RegExp]"), "regex?"), kirbyref.ensure_DASH_test((Array.isArray(kirbyref.vec()) && Array.isArray(kirbyref.vec(1)) && Array.isArray(kirbyref.vec("2"))), "array?"), kirbyref.ensure_DASH_test(kirbyref.rtti_QMRK_(new Date(), "[object Date]"), "date?"), kirbyref.ensure_DASH_test(((typeof (true) == "boolean") && (typeof (false) == "boolean")), "boolean?"), kirbyref.ensure_DASH_test(((typeof (true) == "boolean") && (typeof (false) == "boolean")), "bool?"), kirbyref.ensure_DASH_test(((typeof (4) == "number") && (typeof (8) == "number")), "number?"), kirbyref.ensure_DASH_test(((typeof (4) == "number") && (typeof (8) == "number")), "num?"), kirbyref.ensure_DASH_test(((typeof ("a") == "string") && (typeof ("b") == "string")), "string?"), kirbyref.ensure_DASH_test(((typeof ("a") == "string") && (typeof ("b") == "string")), "str?"), kirbyref.ensure_DASH_test((typeof (function() {
      return null;
    }) == "function"), "fn?"), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = undefined);
    return (typeof (TMPVAR) == "undefined");
  }).call(this), "undef?"), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = 3);
    return (typeof (TMPVAR) != "undefined");
  }).call(this), "def?"), kirbyref.ensure_DASH_test((null === null), "nil?"), kirbyref.ensure_DASH_test((0 == 0), "zero?"), kirbyref.ensure_DASH_test((1 == 1), "one?"), kirbyref.ensure_DASH_test((-33 < 0), "neg?"), kirbyref.ensure_DASH_test((45 > 0), "pos?"), kirbyref.ensure_DASH_test((1 === kirbyref.getProp(Array.from(kirbyref.hash_DASH_map("a", 1).values()), 0)), "values"), kirbyref.ensure_DASH_test(("a" === kirbyref.getProp(Array.from(kirbyref.hash_DASH_map("a", 1).keys()), 0)), "keys"), kirbyref.ensure_DASH_test((function() {
    let GS__3 = kirbyref.vec(3, 4);
    let a = kirbyref.getIndex(GS__3, 0);
    let b = kirbyref.getIndex(GS__3, 1);
    return ((3 === a) && (4 === b));
  }).call(this), "destruct vec"), kirbyref.ensure_DASH_test((function() {
    let GS__4 = kirbyref.vec(3, 4, kirbyref.vec(5, 6));
    let a = kirbyref.getIndex(GS__4, 0);
    let b = kirbyref.getIndex(GS__4, 1);
    let GS__5 = GS__4[2];
    let c = kirbyref.getIndex(GS__5, 0);
    let d = kirbyref.getIndex(GS__5, 1);
    return ((5 === c) && (6 === d));
  }).call(this), "destruct vec,2"), kirbyref.ensure_DASH_test((function() {
    let GS__6 = kirbyref.object("a", 3, "b", 4);
    let a = kirbyref.getProp(GS__6, "a");
    let b = kirbyref.getProp(GS__6, "b");
    return ((3 === a) && (4 === b));
  }).call(this), "destruct obj"), kirbyref.ensure_DASH_test((function() {
    let GS__7 = kirbyref.hash_DASH_map("a", 3, "b", 4);
    let a = kirbyref.getProp(GS__7, "a");
    let b = kirbyref.getProp(GS__7, "b");
    return ((3 === a) && (4 === b));
  }).call(this), "destruct map"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(1, 2, 3, 4, 5), (function(a, GS__8, GS__9) {
    let b = kirbyref.getIndex(GS__8, 0);
    let c = kirbyref.getIndex(GS__8, 1);
    let d = kirbyref.getProp(GS__9, "d");
    let e = kirbyref.getProp(GS__9, "e");
    return kirbyref.vec(a, b, c, d, e);
  })(1, kirbyref.vec(2, 3), kirbyref.object("d", 4, "e", 5))), "destruct fn args"), kirbyref.ensure_DASH_test(((1 === 1) ?
    true :
    (function() {
      throw Error("error!");
    }).call(this)), "assert"), kirbyref.ensure_DASH_test(((1 === 0) === false), "false?"), kirbyref.ensure_DASH_test(((0 === 0) === true), "true?"), kirbyref.ensure_DASH_test(("hello" === ((!false) ?
      (function() {
        return "hello";
      }).call(this) :
      null)), "when-not"), kirbyref.ensure_DASH_test(("hello" === ((!false) ?
      (function() {
        return "hello";
      }).call(this) :
      null)), "unless"), kirbyref.ensure_DASH_test(("hello" === ((!(1 === 0)) ?
      "hello" :
      null)), "if-not"), kirbyref.ensure_DASH_test(("hello" === ((!(1 === 1)) ?
      "boom" :
      "hello")), "if-not->else"), kirbyref.ensure_DASH_test((10 === (function() {
      (
      TMPVAR = 0);
      for (let ____break = false; ((!____break) && (TMPVAR !== 10));) {
        ++TMPVAR;
      }
      return TMPVAR;
    }).call(this)), "while"), kirbyref.ensure_DASH_test((101 === (true ?
      (function() {
        (
        TMPVAR = 100);
        return ++TMPVAR;
      }).call(this) :
      null)), "when"), kirbyref.ensure_DASH_test(("b" === ((1 === 2) ?
      "a" :
      ((2 === 2) ?
        "b" :
        null))), "cond"), kirbyref.ensure_DASH_test(("b" === ((1 === 2) ?
      "a" :
      (true ?
        "b" :
        null))), "cond->else"), kirbyref.ensure_DASH_test((7 === (function() {
      let GS__10 = (1 + 2);
      return ((0 === GS__10) ?
        9 :
        (function() {
          let GS__11 = (3 === GS__10);
          let ____x = GS__11;
          return (GS__11 ?
            (function() {
              let ____args = Array.prototype.slice.call(arguments);
              return (____args[0] ?
                7 :
                5);
            })(____x) :
            (("a" === GS__10) ?
              3 :
              null));
        }).call(this));
    }).call(this)), "condp"), kirbyref.ensure_DASH_test(("boom" === (function() {
      let GS__12 = (1 + 2);
      return ((0 === GS__12) ?
        9 :
        (function() {
          let GS__13 = (2 === GS__12);
          let ____x = GS__13;
          return (GS__13 ?
            (function() {
              let ____args = Array.prototype.slice.call(arguments);
              return (____args[0] ?
                7 :
                5);
            })(____x) :
            (("a" === GS__12) ?
              3 :
              (true ?
                "boom" :
                null)));
        }).call(this));
    }).call(this)), "condp->default"), kirbyref.ensure_DASH_test((36 === (((1 + 2) * 3) * 4)), "->"), kirbyref.ensure_DASH_test((8 === (4 + (12 / (1 + 2)))), "->>"), kirbyref.ensure_DASH_test((3 === (function() {
      let a = 1;
      let b = 2;
      return (a + b);
    }).call(this)), "let"), kirbyref.ensure_DASH_test((1 == kirbyref.count(kirbyref.vec(1))), "single?"), kirbyref.ensure_DASH_test((2 == kirbyref.count(kirbyref.vec(1, 2))), "double?"), kirbyref.ensure_DASH_test((3 == kirbyref.count(kirbyref.vec(1, 2, 3))), "triple?"), kirbyref.ensure_DASH_test((911 === (function() {
      let _x_ = null;
      let recur = null;
      let _zz_ = kirbyref.JSSymbol("!");
      let _f_ = function(a, b) {
        return ((a === b) ?
          911 :
          recur((a + 1), (b - 1)));
      };
      let _r_ = _f_;
      (recur = function() {
        (
        _x_ = Array.prototype.slice.call(arguments, 0));
        if (_r_ !== _zz_) {
          _r_ = _zz_;
          while (_r_ === _zz_) {
            _r_ = _f_.apply(this, _x_)
          }
          return _r_
        }
        return _zz_;
      });
      return recur(0, 10);
    })(this)), "loop"), kirbyref.ensure_DASH_test((4 === s.concat(kirbyref.vec(1, 2), kirbyref.vec(3, 4)).length), "concat"), kirbyref.ensure_DASH_test(("a,b" === kirbyref.vec("a", "b").join(",")), "join"), kirbyref.ensure_DASH_test((3 === (function() {
      let a = (1 + 2);
      (a / 3);
      return a;
    }).call(this)), "do-with"), kirbyref.ensure_DASH_test((false === (function() {
      (1 + 2);
      (1 === 1);
      return false;
    }).call(this)), "do->false"), kirbyref.ensure_DASH_test((true === (function() {
      (1 + 2);
      (1 === 2);
      return true;
    }).call(this)), "do->true"), kirbyref.ensure_DASH_test((null === (function() {
      (1 + 2);
      911;
      return null;
    }).call(this)), "do->nil"), kirbyref.ensure_DASH_test((undefined === (function() {
      (1 + 2);
      911;
      return undefined;
    }).call(this)), "do->undef"), kirbyref.ensure_DASH_test((4 === (1 + 3)), "inc"), kirbyref.ensure_DASH_test((2 === (3 - 1)), "dec"), kirbyref.ensure_DASH_test((45 === (function() {
      let outer = 0;
      for (let ____coll = null, x = 0, ____end = 10, ____break = false; ((!____break) && (x < ____end)); x = (x + 1)) {
        (
        outer += x);
      }
      return outer;
    }).call(this)), "dotimes"), kirbyref.ensure_DASH_test((12 === kirbyref.count((function() {
      let ret = kirbyref.list();
      for (let ____coll = null, i = 0, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a"), kirbyref.ensure_DASH_test((2 === kirbyref.count((function() {
      let ret = kirbyref.list();
      for (let ____coll = null, i = 10, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a,b"), kirbyref.ensure_DASH_test((4 === kirbyref.count((function() {
      let ret = kirbyref.list();
      for (let ____coll = null, i = 5, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a,b,c"), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = (function() {
      let f = function(a, b) {
        return kirbyref.vec(b, a);
      };
      return f.apply(this, kirbyref.vec(1, 2));
    }).call(this));
    return ((2 === TMPVAR[0]) && (1 === std.last(TMPVAR)));
  }).call(this), "apply"), kirbyref.ensure_DASH_test((function() {
    (
    TMPVAR = (function() {
      let f = function(a, b) {
        return kirbyref.vec(b, a);
      };
      return f.apply(this, kirbyref.vector(1, 2));
    }).call(this));
    return ((2 === TMPVAR[0]) && (1 === std.last(TMPVAR)));
  }).call(this), "apply+"), kirbyref.ensure_DASH_test(("z" === "hellz".charAt(4)), "ch@"), kirbyref.ensure_DASH_test((false === (function() {
      (
      TMPVAR = false);
      return TMPVAR;
    }).call(this)), "false!"), kirbyref.ensure_DASH_test((true === (function() {
      (
      TMPVAR = true);
      return TMPVAR;
    }).call(this)), "true!"), kirbyref.ensure_DASH_test((function() {
    let x = (function() {
      let ret = kirbyref.list();
      for (let ____coll = null, ____index = 0, ____end = 5, ____break = false; ((!____break) && (____index < ____end)); ____index = (____index + 1)) {
        ret.push("a");
      }
      return ret;
    }).call(this);
    return ((5 === kirbyref.count(x)) && ("a" === std.last(x)));
  }).call(this), "repeat"), kirbyref.ensure_DASH_test((28 === (function() {
      (
      TMPVAR = 0);
      for (let GS__16 = 0, GS__14 = true, GS__15 = (function() {
            let ret = kirbyref.list();
            for (let ____coll = null, i = 0, ____end = 10, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
              ret.push(i);
            }
            return ret;
          }).call(this), ____sz = kirbyref.count(GS__15), ____break = false; (!____break && GS__14 && (GS__16 < ____sz)); ++GS__16) {
        let x = GS__15[GS__16];
        let y = (1 + x);
        let z = y;
        if (!((x < 7))) {
          GS__14 = false;
          ____break = true;
        } else {
          (
          TMPVAR += z);
        }
      }
      return TMPVAR;
    }).call(this)), "doseq"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 3, 7), kirbyref.vec(1, 1, 7), kirbyref.vec(2, 3, 7), kirbyref.vec(2, 1, 7)), (function() {
    (
    TMPVAR = kirbyref.vec());
    for (let GS__23 = 0, GS__17 = true, GS__22 = kirbyref.vec(1, 2), ____sz = kirbyref.count(GS__22); (GS__17 && (GS__23 < ____sz)); ++GS__23) {
      let x = GS__22[GS__23];
      for (let GS__21 = 0, GS__20 = kirbyref.vec(3, 1), ____sz = kirbyref.count(GS__20); (GS__17 && (GS__21 < ____sz)); ++GS__21) {
        let y = GS__20[GS__21];
        for (let GS__19 = 0, GS__18 = kirbyref.vec(7), ____sz = kirbyref.count(GS__18), ____break = false; (!____break && GS__17 && (GS__19 < ____sz)); ++GS__19) {
          let z = GS__18[GS__19];
          conj_BANG_(TMPVAR, kirbyref.vec(x, y, z));
        }
      }
    }
    return TMPVAR;
  }).call(this)), "doseq, 3 levels"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 3, 7), kirbyref.vec(1, 1, 7), kirbyref.vec(2, 3, 7), kirbyref.vec(2, 1, 7)), (function() {
    let GS__24 = [];
    for (let GS__31 = 0, GS__25 = true, GS__30 = kirbyref.vec(1, 2), ____sz = kirbyref.count(GS__30); (GS__25 && (GS__31 < ____sz)); ++GS__31) {
      let x = GS__30[GS__31];
      for (let GS__29 = 0, GS__28 = kirbyref.vec(3, 1), ____sz = kirbyref.count(GS__28); (GS__25 && (GS__29 < ____sz)); ++GS__29) {
        let y = GS__28[GS__29];
        for (let GS__27 = 0, GS__26 = kirbyref.vec(7), ____sz = kirbyref.count(GS__26), ____break = false; (!____break && GS__25 && (GS__27 < ____sz)); ++GS__27) {
          let z = GS__26[GS__27];
          GS__24.push((function() {
            return kirbyref.vec(x, y, z);
          }).call(this));
        }
      }
    }
    return GS__24;
  }).call(this)), "for"), kirbyref.ensure_DASH_test(("hello!" === (function() {
      let GS__32 = "hello".slice(0);
      let s = GS__32;
      return ((kirbyref.count(GS__32) > 0) ?
        kirbyref.vector(s, "!").join("") :
        null);
    }).call(this)), "if-some+"), kirbyref.ensure_DASH_test(("ab" === (function() {
      let GS__33 = "hello".slice(5);
      let s = GS__33;
      return ((kirbyref.count(GS__33) > 0) ?
        kirbyref.vector(s, "!").join("") :
        kirbyref.vector("ab").join(""));
    }).call(this)), "if-some+->else"), kirbyref.ensure_DASH_test((10 === (function() {
      let GS__34 = (1 + 2);
      let a = GS__34;
      return (((typeof (GS__34) == "undefined") || (GS__34 === null)) ?
        null :
        (a + 7));
    }).call(this)), "if-some"), kirbyref.ensure_DASH_test((17 === (function() {
      let GS__35 = null;
      let a = GS__35;
      return (((typeof (GS__35) == "undefined") || (GS__35 === null)) ?
        (7 + 10) :
        (a + a));
    }).call(this)), "if-some->else"), kirbyref.ensure_DASH_test((7 === (function() {
      let GS__36 = (1 === 1);
      let a = GS__36;
      return (GS__36 ?
        (3 + 4) :
        null);
    }).call(this)), "if-let"), kirbyref.ensure_DASH_test((15 === (function() {
      let GS__37 = (1 === 2);
      let a = GS__37;
      return (GS__37 ?
        (3 + 4) :
        (7 + 8));
    }).call(this)), "if-let->else"), kirbyref.ensure_DASH_test(("hello" === (function() {
      let GS__38 = "hello".slice(2);
      let s = GS__38;
      return ((kirbyref.count(GS__38) > 0) ?
        (function() {
          kirbyref.count(s);
          return kirbyref.vector("he", s).join("");
        }).call(this) :
        null);
    }).call(this)), "when-some+"), kirbyref.ensure_DASH_test(("hehello" === (function() {
      let GS__39 = "hello";
      let s = GS__39;
      return ((!((typeof (GS__39) == "undefined") || (GS__39 === null))) ?
        (function() {
          kirbyref.count(s);
          return kirbyref.vector("he", s).join("");
        }).call(this) :
        null);
    }).call(this)), "when-some"), kirbyref.ensure_DASH_test((7 === (function() {
      let GS__40 = (1 === 1);
      let a = GS__40;
      return (GS__40 ?
        (function() {
          (2 + 2);
          return (3 + 4);
        }).call(this) :
        null);
    }).call(this)), "when-let"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_set(1, 2), (function() {
    let GS__41 = kirbyref.hash_DASH_set(1);
    std.conj_BANG_(GS__41, 2);
    return GS__41;
  }).call(this)), "conj!,set"), kirbyref.ensure_DASH_test((2 === kirbyref.count((function() {
      let GS__42 = kirbyref.vec();
      std.conj_BANG_(GS__42, 1);
      std.conj_BANG_(GS__42, 2);
      return GS__42;
    }).call(this))), "doto,conj!"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_set(1), (function() {
    let GS__43 = kirbyref.hash_DASH_set(1, 2, 3);
    std.disj_BANG_(GS__43, 2, 3);
    return GS__43;
  }).call(this)), "disj!,set"), kirbyref.ensure_DASH_test((2 === (kirbyref.vec(1, 2) || kirbyref.vector()).map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (1 + ____args[0]);
    })[0]), "map"), kirbyref.ensure_DASH_test((2 === kirbyref.count((kirbyref.vec(1, 2, 8) || kirbyref.vector()).filter(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (0 == kirbyref.mod(____args[0], 2));
    }))), "filter"), kirbyref.ensure_DASH_test((true === (kirbyref.vec(1, 2, 8) || kirbyref.vector()).some(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (0 != kirbyref.mod(____args[0], 2));
    })), "some"), kirbyref.ensure_DASH_test((function() {
    let x = Array.prototype.slice.call(kirbyref.vec(1, 2, 3, 4, 5), 0, 3);
    return ((3 === kirbyref.count(x)) && (3 === std.last(x)));
  }).call(this), "take"), kirbyref.ensure_DASH_test((21 === (function() {
      let f = function() {
        let xs = Array.prototype.slice.call(arguments, 0);
        return 21;
      };
      return f(1, 4, 5);
    }).call(this)), "constantly"), kirbyref.ensure_DASH_test((function() {
    let x = Array.prototype.slice.call(kirbyref.vec(1, 2, 3, 4, 5), 3);
    return ((2 === kirbyref.count(x)) && (5 === std.last(x)));
  }).call(this), "drop"), kirbyref.ensure_DASH_test((21 === (kirbyref.vec(5, 7, 9) || kirbyref.vector()).reduce(function(acc, x) {
      return (acc + x);
    })), "reduce2"), kirbyref.ensure_DASH_test((31 === (kirbyref.vec(5, 7, 9) || kirbyref.vector()).reduce(function(acc, x) {
      return (acc + x);
    }, 10)), "reduce"), kirbyref.ensure_DASH_test(("ab" === kirbyref.vector("a", "b").join("")), "str"), kirbyref.ensure_DASH_test((20 === (function() {
      let f = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (____args[0] + 7);
      };
      return f(13);
    }).call(this)), "lambda"), kirbyref.ensure_DASH_test((6 === (function() {
      (
      TMPVAR = 0);
      kirbyref.vec(1, 2, 3).forEach(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (TMPVAR += ____args[0]);
      });
      return TMPVAR;
    }).call(this)), "each"), kirbyref.ensure_DASH_test((6 === (function() {
      (
      TMPVAR = 0);
      if (true) {
        let GS__44 = kirbyref.hash_DASH_map("a", 1, "b", 2, "c", 3);
        let GS__45 = function() {
          let ____args = Array.prototype.slice.call(arguments);
          return (TMPVAR += ____args[0]);
        };
        if (kirbyref.object_QMRK_(GS__44)) {
          if (true) {
            let GS__46 = GS__44;
            Object.keys(GS__46).forEach(function(p) {
              return GS__45(kirbyref.getProp(GS__46, p), p);
            });
          }
        } else {
          GS__44.forEach(GS__45)
        }
      }
      return TMPVAR;
    }).call(this)), "each-key"), kirbyref.ensure_DASH_test(s.not_DASH_empty(kirbyref.vec(2)), "not-empty"), kirbyref.ensure_DASH_test((2 === s.opt_QMRK__QMRK_(undefined, 2)), "opt??"), kirbyref.ensure_DASH_test((function() {
    let a = kirbyref.vec(1);
    let b = s.cons(2, a);
    return ((1 === kirbyref.count(a)) && (2 === kirbyref.count(b)) && (1 === s.last(b)));
  }).call(this), "cons"), kirbyref.ensure_DASH_test((function() {
    let a = kirbyref.vec(1);
    let b = s.conj(a, 2, 3);
    return ((1 === kirbyref.count(a)) && (3 === kirbyref.count(b)) && (3 === s.last(b)));
  }).call(this), "conj -> vec"), kirbyref.ensure_DASH_test((function() {
    let a = s.list(1);
    let b = s.conj(a, 2, 3);
    return ((1 === kirbyref.count(a)) && (3 === kirbyref.count(b)) && (1 === s.last(b)));
  }).call(this), "conj -> list"), kirbyref.ensure_DASH_test((function() {
    let c = kirbyref.vec(9, 8, 7);
    let GS__47 = s.pop_BANG_(c);
    let a = kirbyref.getIndex(GS__47, 0);
    let b = kirbyref.getIndex(GS__47, 1);
    return ((7 === a) && (2 === kirbyref.count(c)));
  }).call(this), "pop!"), kirbyref.ensure_DASH_test((function() {
    let c = kirbyref.vec(9, 8, 7);
    let GS__48 = s.pop(c);
    let a = kirbyref.getIndex(GS__48, 0);
    let b = kirbyref.getIndex(GS__48, 1);
    return ((7 === a) && (3 === kirbyref.count(c)));
  }).call(this), "pop"), kirbyref.ensure_DASH_test(("xaaaz" === s.wrap_DASH_str("aaa", "x", "z")), "wrap-str"), kirbyref.ensure_DASH_test((typeof (s.getProp(kirbyref.hash_DASH_map("a", 1, "z", 5), "x")) == "undefined"), "getProp,false"), kirbyref.ensure_DASH_test((5 === s.getProp(kirbyref.hash_DASH_map("a", 1, "z", 5), "z")), "getProp,true"), kirbyref.ensure_DASH_test((typeof (s.getProp(kirbyref.object("a", 1, "z", 5), "toString", false)) == "function"), "getProp,false"), kirbyref.ensure_DASH_test(("(vec 1 2 3)" == s.prn(kirbyref.vec(1, 2, 3))), "prn"), kirbyref.ensure_DASH_test((function() {
    let p = 2;
    let v = 3;
    return (s.simple_QMRK_(p) && (v === 3));
  }).call(this), "simple?"), kirbyref.ensure_DASH_test((function() {
    let k = s.keyword(":hello");
    let v = k.value;
    return (s.keyword_QMRK_(k) && (v === ":hello"));
  }).call(this), "keyword,keyword?"), kirbyref.ensure_DASH_test((function() {
    let k = s.keyword("::hello");
    let v = kirbyref.vector(k).join("");
    return (s.keyword_QMRK_(k) && v.endsWith("/hello"));
  }).call(this), "scoped,keyword,keyword?"), kirbyref.ensure_DASH_test((function() {
    let s = std.symbol("hello");
    let v = s.value;
    return (std.symbol_QMRK_(s) && (v === "hello"));
  }).call(this), "symbol,symbol?"), kirbyref.ensure_DASH_test((function() {
    let a = s.atom("hello");
    let w = a.value;
    let v = a.value;
    return (s.atom_QMRK_(a) && (w === v) && (v === "hello"));
  }).call(this), "atom,atom?,deref"), kirbyref.ensure_DASH_test(s.symbol_QMRK_(s.keyword_DASH__GT_symbol(s.keyword(":pooh"))), "keyword->symbol"), kirbyref.ensure_DASH_test((8 === (function() {
      let a = s.atom(3);
      s.reset_BANG_(a, 8);
      return a.value;
    }).call(this)), "reset!"), kirbyref.ensure_DASH_test((8 === (function() {
      let a = s.atom(3);
      s.swap_BANG_(a, function(old, more) {
        return (old + more);
      }, 5);
      return a.value;
    }).call(this)), "swap!"), kirbyref.ensure_DASH_test(s.rtti_QMRK_(s.atom(2), "[object Object]"), "rtti"), kirbyref.ensure_DASH_test(((!s.simple_QMRK_(kirbyref.vec(1))) && (!s.simple_QMRK_(kirbyref.hash_DASH_map("a", 1)))), "complex?"), kirbyref.ensure_DASH_test((s.simple_QMRK_(1) && s.simple_QMRK_(null)), "simple?"), kirbyref.ensure_DASH_test(((s.simple_QMRK_(kirbyref.vec()) === false) && (s.simple_QMRK_(kirbyref.hash_DASH_map()) === false)), "not simple?"), kirbyref.ensure_DASH_test(s.sequential_QMRK_(kirbyref.vec(1, 2, 3)), "sequential?"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(1, 2), kirbyref.vec(1, 2)), "eq? -> array"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.object("a", 1, "b", 2), kirbyref.object("b", 2, "a", 1)), "eq? -> object"), kirbyref.ensure_DASH_test((!s.object_QMRK_(1)), "not object?"), kirbyref.ensure_DASH_test(s.object_QMRK_(kirbyref.object("a", 1)), "object?"), kirbyref.ensure_DASH_test((3 === s.last(kirbyref.vec(1, 2, 3))), "last"), kirbyref.ensure_DASH_test((3 === kirbyref.getProp(kirbyref.hash_DASH_map("a", 1, "b", 3), "b")), "(map,key)"), kirbyref.ensure_DASH_test((3 === kirbyref.getProp(kirbyref.hash_DASH_map("a", 1, "b", 3), "b")), "(key,map)"), kirbyref.ensure_DASH_test(s.list_QMRK_(s.into(s.list(), kirbyref.vec(1, 2, 3))), "into"), kirbyref.ensure_DASH_test((function() {
    let x = s.list(1, 2, 3);
    let y = s.into(s.list(), x);
    s.conj_BANG_(x, 4);
    return ((4 === kirbyref.count(x)) && (3 === kirbyref.count(y)) && s.list_QMRK_(y));
  }).call(this), "into"), kirbyref.ensure_DASH_test(s.list_QMRK_(s.list(1, 2, 3)), "list,list?"), kirbyref.ensure_DASH_test(s.vector_QMRK_(s.vector(1, 2, 3)), "vector,vector?"), kirbyref.ensure_DASH_test(s.map_QMRK_(s.hash_DASH_map("a", 1, "b", 2, "c", 3)), "hash-map,map?"), kirbyref.ensure_DASH_test(s.object_QMRK_(s.object("a", 1, "b", 2, "c", 3)), "object,object?"), kirbyref.ensure_DASH_test((3 === kirbyref.count(s.seq("abc"))), "seq"), kirbyref.ensure_DASH_test(s.contains_QMRK_(kirbyref.vec(1, 2, 3), 2), "contains?"), kirbyref.ensure_DASH_test((s.nichts_QMRK_(null) && s.nichts_QMRK_(undefined)), "nichts?"), kirbyref.ensure_DASH_test(s.some_QMRK_(false), "some?"), kirbyref.ensure_DASH_test((3 === s.count(kirbyref.vec(1, 2, 3))), "count"), kirbyref.ensure_DASH_test((4 === kirbyref.count(s.concat(kirbyref.vec(1, 2), kirbyref.vec(3, 4)))), "concat"), kirbyref.ensure_DASH_test((3 === s.last(s.evens(kirbyref.vec(1, 2, 3, 4)))), "evens"), kirbyref.ensure_DASH_test((4 === s.last(s.odds(kirbyref.vec(1, 2, 3, 4)))), "odds"), kirbyref.ensure_DASH_test(((1 === s.mod(10, 3)) && (2 === s.mod(-10, 3))), "modulo"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(1, 5, 2, 6), s.interleave(kirbyref.vec(1, 2, 3), kirbyref.vec(5, 6))), "interleave"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(5, 1, 6, 2), s.interleave(kirbyref.vec(5, 6), kirbyref.vec(1, 2, 3))), "interleave"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", 1, "b", 2), s.zipmap(kirbyref.vec("a", "b"), kirbyref.vec(1, 2, 3))), "zipmap"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", 5, "b", 6), s.zipmap(kirbyref.vec("a", "b", "c"), kirbyref.vec(5, 6))), "zipmap"), kirbyref.ensure_DASH_test((function() {
    let g = s.gensym("X");
    return (s.symbol_QMRK_(g) && g.value.startsWith("X"));
  }).call(this), "gensym"), kirbyref.ensure_DASH_test((1 === kirbyref.getProp(Array.prototype.slice.call(kirbyref.vec(1, 2), 0, -1), 0)), "slice,a,b"), kirbyref.ensure_DASH_test((2 === kirbyref.getProp(Array.prototype.slice.call(kirbyref.vec(1, 2), 1), 0)), "slice,a"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", 1, "b", 2), s.assoc_BANG_(kirbyref.hash_DASH_map(), "a", 1, "b", 2)), "assoc!"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("c", 3), s.dissoc_BANG_(kirbyref.hash_DASH_map("a", 1, "b", 2, "c", 3), "a", "b")), "dissoc!"), kirbyref.ensure_DASH_test((s.falsy_QMRK_(false) && s.falsy_QMRK_(null)), "falsy?"), kirbyref.ensure_DASH_test(((!s.truthy_QMRK_(null)) && (!s.truthy_QMRK_(false))), "truthy?"), kirbyref.ensure_DASH_test((function() {
    let x = s.quote_DASH_str("abc");
    return (x.startsWith("\"") && x.endsWith("\""));
  }).call(this), "quote-str"), kirbyref.ensure_DASH_test(("abc" === s.unquote_DASH_str("\"abc\"")), "unquote-str"), kirbyref.ensure_DASH_test(("&lt;&gt;&amp;&quot;&apos;" === s.esc_DASH_xml("<>&\"'")), "escXml"), kirbyref.ensure_DASH_test((function() {
    let GS__49 = s.split_DASH_seq(kirbyref.vec(1, 2, 3, 4, 5), 3);
    let x = kirbyref.getIndex(GS__49, 0);
    let y = kirbyref.getIndex(GS__49, 1);
    return (s.eq_QMRK_(kirbyref.vec(1, 2, 3), x) && s.eq_QMRK_(kirbyref.vec(4, 5), y));
  }).call(this), "split-seq"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", 1, "c", 3), s.select_DASH_keys(kirbyref.hash_DASH_map("a", 1, "b", 2, "c", 3), kirbyref.vec("a", "c"))), "select-keys"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", kirbyref.hash_DASH_map("b", kirbyref.hash_DASH_map("c", 9))), s.update_DASH_in_BANG_(kirbyref.hash_DASH_map("a", kirbyref.hash_DASH_map("b", kirbyref.hash_DASH_map("c", 4))), kirbyref.vec("a", "b", "c"), function(old, n) {
    return (old + n);
  }, 5)), "update-in"), kirbyref.ensure_DASH_test((4 === s.get_DASH_in(kirbyref.hash_DASH_map("a", kirbyref.vec(2, 4, kirbyref.hash_DASH_map("c", 4))), kirbyref.vec("a", 2, "c"))), "get-in"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(7, 7, 7), s.fill_DASH_array(3, 7)), "fill-array,value"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(0, 1, 2), s.fill_DASH_array(3, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0];
  })), "fill-array,function"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(3, 4), s.copy_DASH_array(kirbyref.vec(3, 4, 5, 7), kirbyref.vec(0, 0))), "copy-array,value"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(2, 5, 7, 6), s.copy_DASH_array(kirbyref.vec(2, 5, 7), kirbyref.vec(3, 4, 9, 6))), "copy-array,value"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(2, 5, 7), s.aclone(kirbyref.vec(2, 5, 7))), "aclone"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.object("a", 1, "b", 7, "c", "gg", "d", 7), (function() {
    let a = kirbyref.object("a", 1, "b", 2, "c", "ss");
    let b = kirbyref.object("b", 7, "c", "gg", "d", 7);
    return s.mixin(a, b);
  }).call(this)), "mixin"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_map("a", 1, "b", 2), s.merge(kirbyref.hash_DASH_map("a", 1), kirbyref.hash_DASH_map("b", 2))), "merge"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.hash_DASH_set(1, 2, 4), s.difference(kirbyref.hash_DASH_set(1, 2, 3, 4, 5), kirbyref.hash_DASH_set(3, 5))), "difference"), kirbyref.ensure_DASH_test((50 === s.percent(20, 40)), "percent"), kirbyref.ensure_DASH_test(("3.333" === s.to_DASH_fixed((10 / 3), 3)), "to-fixed"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec("aa", "bb", "cc", "dd", "ee", "ff"), s.mapcat(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0].split(/\d/);
  }, kirbyref.vec("aa1bb", "cc2dd", "ee3ff"))), "mapcat"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(4, 5), (function(...____args) {
    return [function(a) {
      return (1 + a);
    }(...____args), function(b) {
      return (2 + b);
    }(...____args)];
  })(3)), "juxt"), kirbyref.ensure_DASH_test((14 === (function(...____args) {
      return function(a) {
        return (1 + a);
      }(function(b, c) {
        return (b + c);
      }(...____args));
    })(3, 10)), "comp"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(1, 2, "3"), kirbyref.vector(1, 2, "3")), "quote"), kirbyref.ensure_DASH_test((3 === (kirbyref.vec(2, 4, 8, 3, 6, 7) || kirbyref.vector()).find(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (0 != kirbyref.mod(____args[0], 2));
    })), "find"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(2, 3, 4, 9), s.sort_BANG_(kirbyref.vec(3, 9, 4, 2))), "simple sort!"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.object("a", 2), kirbyref.object("a", 3), kirbyref.object("a", 4), kirbyref.object("a", 9)), s.sort_BANG_(function(x, y) {
    return ((x.a < y.a) ?
      -1 :
      ((x.a > y.a) ?
        1 :
        0));
  }, kirbyref.vec(kirbyref.object("a", 3), kirbyref.object("a", 9), kirbyref.object("a", 4), kirbyref.object("a", 2)))), "object sort!"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 2, 3), kirbyref.vec(4, 5, 6), kirbyref.vec(7, 8)), s.partition(3, kirbyref.vec(1, 2, 3, 4, 5, 6, 7, 8))), "partition"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec("123", "456", "78"), s.split_DASH_str(3, "12345678")), "split-str"), kirbyref.ensure_DASH_test((function() {
    let obj = kirbyref.hash_DASH_set(1, 2, 3);
    return (set_QMRK_(obj) && (3 === kirbyref.count(obj)));
  }).call(this), "object,Set"), kirbyref.ensure_DASH_test((function() {
    let obj = kirbyref.hash_DASH_map("a", 1, "b", 2);
    return (map_QMRK_(obj) && (2 == kirbyref.count(obj)) && (1 == obj.get("a")) && (2 == obj.get("b")));
  }).call(this), "object,Map"), kirbyref.ensure_DASH_test((698 === s.max_DASH_by(s.identity, kirbyref.vec(78, 7, 698, 4, 5, 2, -1))), "max-by"), kirbyref.ensure_DASH_test((-1 === s.min_DASH_by(s.identity, kirbyref.vec(78, 7, 6, 4, 5, 2, -1))), "min-by"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(-2, -1), take_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (____args[0] < 0);
  }, kirbyref.vec(-2, -1, 0, 1, 2, 3))), "take-while"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(), take_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (____args[0] < 0);
  }, kirbyref.vec(0, 1, 2, 3))), "take-while"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(3, 4, 5, 6), drop_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 > ____args[0]);
  }, kirbyref.vec(1, 2, 3, 4, 5, 6))), "drop-while"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(4, 5, 6), drop_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 >= ____args[0]);
  }, kirbyref.vec(1, 2, 3, 4, 5, 6))), "drop-while"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 2, 3), kirbyref.vec(4, 5)), split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 >= ____args[0]);
  }, kirbyref.vec(1, 2, 3, 4, 5))), "split-with"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 2), kirbyref.vec(3, 2, 1)), split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 > ____args[0]);
  }, kirbyref.vec(1, 2, 3, 2, 1))), "split-with"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(kirbyref.vec(1, 2, 3, 2, 1), kirbyref.vec()), split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (10 > ____args[0]);
  }, kirbyref.vec(1, 2, 3, 2, 1))), "split-with"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(5, 3, 1), rseq(kirbyref.vec(1, 3, 5))), "rseq,reverse"), kirbyref.ensure_DASH_test((3 === (function(mo) {
      let bind = mo.bind;
      let unit = mo.unit;
      let zero = mo.zero;
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind((1 + a), function(b) {
          return (function() {
            return ret((a + b));
          }).call(this);
        });
      });
    })(s.monad_DASH_identity)), "identity monad"), (function() {
    try {
      (function(mo) {
        let bind = mo.bind;
        let unit = mo.unit;
        let zero = mo.zero;
        let ret = function() {
          let ____args = Array.prototype.slice.call(arguments);
          return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
            zero :
            unit(____args[0]));
        };
        return bind(null, function(a) {
          return bind(a, function(b) {
            return bind(b.toString(), function(c) {
              return (function() {
                return ret((a + b + c));
              }).call(this);
            });
          });
        });
      })(s.monad_DASH_identity);
      return kirbyref.ensure_DASH_test_DASH_thrown("any", null, "identity monad->boom");
    } catch (e) {
      return kirbyref.ensure_DASH_test_DASH_thrown("any", e, "identity monad->boom");
    }
  }).call(this), kirbyref.ensure_DASH_test((3 === (function(mo) {
      let bind = mo.bind;
      let unit = mo.unit;
      let zero = mo.zero;
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind((1 + a), function(b) {
          return (function() {
            return ret((a + b));
          }).call(this);
        });
      });
    })(s.monad_DASH_maybe)), "maybe monad"), kirbyref.ensure_DASH_test(((function(mo) {
      let bind = mo.bind;
      let unit = mo.unit;
      let zero = mo.zero;
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind((1 + a), function(b) {
          return bind(null, function(c) {
            return (function() {
              return ret((a + b + c));
            }).call(this);
          });
        });
      });
    })(s.monad_DASH_maybe) === null), "maybe monad->nil"), kirbyref.ensure_DASH_test(s.eq_QMRK_(kirbyref.vec(5, kirbyref.object("value", 5, "log", kirbyref.vec("mult3(1)", "add2(3)"))), (function(mo) {
    let bind = mo.bind;
    let unit = mo.unit;
    let zero = mo.zero;
    let ret = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
        zero :
        unit(____args[0]));
    };
    return bind(exlog(mult3, "mult3"), function(c1) {
      return bind(exlog(add2, "add2"), function(c2) {
        return (function() {
          return ret(c2);
        }).call(this);
      });
    });
  })(s.monad_DASH_state)(kirbyref.object("value", 1, "log", kirbyref.vec()))), "state monad"), kirbyref.ensure_DASH_test((3 === std.run_DASH_monad_DASH_continuation((function(mo) {
      let bind = mo.bind;
      let unit = mo.unit;
      let zero = mo.zero;
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbyref.nichts_QMRK_(____args[0]) && kirbyref.some_QMRK_(zero)) ?
          zero :
          unit(____args[0]));
      };
      return bind((function(v) {
        return function(c) {
          return c(v);
        };
      })(1), function(x) {
        return bind((function(v) {
          return function(c) {
            return c(v);
          };
        })(2), function(y) {
          return (function() {
            return ret((x + y));
          }).call(this);
        });
      });
    })(std.monad_DASH_continuation))), "continuation monad"), kirbyref.ensure_DASH_test((function() {
    let f = function(v) {
      return function(s) {
        return kirbyref.vec(v, s);
      };
    };
    let lhs = s.monad_DASH_state.bind(s.monad_DASH_state.unit(911), f);
    let rhs = f(911);
    let lf = lhs("hello");
    let rt = rhs("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), "monad rule 1: bind(unit(x), f) ≡ f(x)"), kirbyref.ensure_DASH_test((function() {
    let mv = function(s) {
      return kirbyref.vec(3, s);
    };
    let lhs = s.monad_DASH_state.bind(mv, s.monad_DASH_state.unit);
    let lf = lhs("hello");
    let rt = mv("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), "monad rule 2: bind(m, unit) ≡ m"), kirbyref.ensure_DASH_test((function() {
    let f = function(v) {
      return function(s) {
        return kirbyref.vec(3, s);
      };
    };
    let g = function(v) {
      return function(s) {
        return kirbyref.vec(5, s);
      };
    };
    let bb = s.monad_DASH_state.bind;
    let mv = function(s) {
      return kirbyref.vec(7, s);
    };
    let lhs = bb(bb(mv, f), g);
    let rhs = bb(mv, function(v) {
      return bb(f(v), g);
    });
    let lf = lhs("hello");
    let rt = rhs("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), kirbyref.vector("monad rule 3:", " bind(bind(m, f), g)", " ≡ bind(m, v ⇒ bind(f(v), g))").join("")), (function() {
    try {
      throw Error(kirbyref.vector("hello", "world").join(""));
      return kirbyref.ensure_DASH_test_DASH_thrown("object", null, "raise!");
    } catch (e) {
      return kirbyref.ensure_DASH_test_DASH_thrown("object", e, "raise!");
    }
  }).call(this), (function() {
    try {
      throw kirbyref.vector("hello", "world").join("");
      return kirbyref.ensure_DASH_test_DASH_thrown("string", null, "trap!");
    } catch (e) {
      return kirbyref.ensure_DASH_test_DASH_thrown("string", e, "trap!");
    }
  }).call(this));
};
s.println(std.run_DASH_test(test_DASH_stdlib, "Kirby stdlib test-suite"));
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.kirby.test.stdlib",
    vars: ["test-stdlib"],
    macros: {
    }
  },
  test_DASH_stdlib: test_DASH_stdlib
};